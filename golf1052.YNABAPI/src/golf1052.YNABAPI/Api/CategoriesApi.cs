/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using golf1052.YNABAPI.Client;
using golf1052.YNABAPI.Model;

namespace golf1052.YNABAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApi : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="lastKnowledgeOfServer">The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)</param>
        /// <returns>Task of CategoriesResponse</returns>
        System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync (string budgetId, long? lastKnowledgeOfServer = null);

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="lastKnowledgeOfServer">The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)</param>
        /// <returns>Task of ApiResponse (CategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<YNABResponse<CategoriesResponse>>> GetCategoriesAsyncWithHttpInfo (string budgetId, long? lastKnowledgeOfServer = null);
        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync (string budgetId, string categoryId);

        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetCategoryByIdAsyncWithHttpInfo (string budgetId, string categoryId);
        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync (string budgetId, DateTime? month, string categoryId);

        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetMonthCategoryByIdAsyncWithHttpInfo (string budgetId, DateTime? month, string categoryId);
        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <param name="data">The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>Task of SaveCategoryResponse</returns>
        System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync (string budgetId, DateTime? month, string categoryId, SaveMonthCategoryWrapper data);

        /// <summary>
        /// Update a category for a specific month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <param name="data">The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>Task of ApiResponse (SaveCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveCategoryResponse>> UpdateMonthCategoryAsyncWithHttpInfo (string budgetId, DateTime? month, string categoryId, SaveMonthCategoryWrapper data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoriesApi : ICategoriesApi
    {
        private golf1052.YNABAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoriesApi(String basePath)
        {
            this.Configuration = new golf1052.YNABAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = golf1052.YNABAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoriesApi(golf1052.YNABAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = golf1052.YNABAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = golf1052.YNABAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public golf1052.YNABAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public golf1052.YNABAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List categories Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="lastKnowledgeOfServer">The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)</param>
        /// <returns>Task of CategoriesResponse</returns>
        public async System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync (string budgetId, long? lastKnowledgeOfServer = null)
        {
             ApiResponse<YNABResponse<CategoriesResponse>> localVarResponse = await GetCategoriesAsyncWithHttpInfo(budgetId, lastKnowledgeOfServer);
             return localVarResponse.Data.Data;

        }

        /// <summary>
        /// List categories Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="lastKnowledgeOfServer">The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)</param>
        /// <returns>Task of ApiResponse (CategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<YNABResponse<CategoriesResponse>>> GetCategoriesAsyncWithHttpInfo (string budgetId, long? lastKnowledgeOfServer = null)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling CategoriesApi->GetCategories");

            var localVarPath = "./budgets/{budget_id}/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (lastKnowledgeOfServer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_knowledge_of_server", lastKnowledgeOfServer)); // query parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YNABResponse<CategoriesResponse>>(localVarStatusCode,
                localVarResponse.Headers.HeadersToDictionary(),
                (YNABResponse<CategoriesResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YNABResponse<CategoriesResponse>)));
        }

        /// <summary>
        /// Single category Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync (string budgetId, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = await GetCategoryByIdAsyncWithHttpInfo(budgetId, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Single category Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetCategoryByIdAsyncWithHttpInfo (string budgetId, string categoryId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling CategoriesApi->GetCategoryById");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetCategoryById");

            var localVarPath = "./budgets/{budget_id}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
        }

        /// <summary>
        /// Single category for a specific budget month Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetMonthCategoryByIdAsync (string budgetId, DateTime? month, string categoryId)
        {
             ApiResponse<CategoryResponse> localVarResponse = await GetMonthCategoryByIdAsyncWithHttpInfo(budgetId, month, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Single category for a specific budget month Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetMonthCategoryByIdAsyncWithHttpInfo (string budgetId, DateTime? month, string categoryId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling CategoriesApi->GetMonthCategoryById");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling CategoriesApi->GetMonthCategoryById");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->GetMonthCategoryById");

            var localVarPath = "./budgets/{budget_id}/months/{month}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (month != null) localVarPathParams.Add("month", this.Configuration.ApiClient.ParameterToString(month)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMonthCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
        }

        /// <summary>
        /// Update a category for a specific month Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <param name="data">The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>Task of SaveCategoryResponse</returns>
        public async System.Threading.Tasks.Task<SaveCategoryResponse> UpdateMonthCategoryAsync (string budgetId, DateTime? month, string categoryId, SaveMonthCategoryWrapper data)
        {
             ApiResponse<SaveCategoryResponse> localVarResponse = await UpdateMonthCategoryAsyncWithHttpInfo(budgetId, month, categoryId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a category for a specific month Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC))</param>
        /// <param name="categoryId">The id of the category</param>
        /// <param name="data">The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>Task of ApiResponse (SaveCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveCategoryResponse>> UpdateMonthCategoryAsyncWithHttpInfo (string budgetId, DateTime? month, string categoryId, SaveMonthCategoryWrapper data)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling CategoriesApi->UpdateMonthCategory");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling CategoriesApi->UpdateMonthCategory");
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new ApiException(400, "Missing required parameter 'categoryId' when calling CategoriesApi->UpdateMonthCategory");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling CategoriesApi->UpdateMonthCategory");

            var localVarPath = "./budgets/{budget_id}/months/{month}/categories/{category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (month != null) localVarPathParams.Add("month", this.Configuration.ApiClient.ParameterToString(month)); // path parameter
            if (categoryId != null) localVarPathParams.Add("category_id", this.Configuration.ApiClient.ParameterToString(categoryId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMonthCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveCategoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveCategoryResponse)));
        }

    }
}
