/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using golf1052.YNABAPI.Client;
using golf1052.YNABAPI.Model;

namespace golf1052.YNABAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayeeLocationsApi : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeLocationId">id of payee location</param>
        /// <returns>Task of PayeeLocationResponse</returns>
        System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync (string budgetId, string payeeLocationId);

        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeLocationId">id of payee location</param>
        /// <returns>Task of ApiResponse (PayeeLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayeeLocationResponse>> GetPayeeLocationByIdAsyncWithHttpInfo (string budgetId, string payeeLocationId);
        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <returns>Task of PayeeLocationsResponse</returns>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync (string budgetId);

        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <returns>Task of ApiResponse (PayeeLocationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayeeLocationsResponse>> GetPayeeLocationsAsyncWithHttpInfo (string budgetId);
        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeId">id of payee</param>
        /// <returns>Task of PayeeLocationsResponse</returns>
        System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync (string budgetId, string payeeId);

        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for a specified payee
        /// </remarks>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeId">id of payee</param>
        /// <returns>Task of ApiResponse (PayeeLocationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayeeLocationsResponse>> GetPayeeLocationsByPayeeAsyncWithHttpInfo (string budgetId, string payeeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayeeLocationsApi : IPayeeLocationsApi
    {
        private golf1052.YNABAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayeeLocationsApi(String basePath)
        {
            this.Configuration = new golf1052.YNABAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = golf1052.YNABAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeLocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayeeLocationsApi(golf1052.YNABAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = golf1052.YNABAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = golf1052.YNABAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClientOptions.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public golf1052.YNABAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public golf1052.YNABAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Single payee location Returns a single payee location
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeLocationId">id of payee location</param>
        /// <returns>Task of PayeeLocationResponse</returns>
        public async System.Threading.Tasks.Task<PayeeLocationResponse> GetPayeeLocationByIdAsync (string budgetId, string payeeLocationId)
        {
             ApiResponse<PayeeLocationResponse> localVarResponse = await GetPayeeLocationByIdAsyncWithHttpInfo(budgetId, payeeLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Single payee location Returns a single payee location
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeLocationId">id of payee location</param>
        /// <returns>Task of ApiResponse (PayeeLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayeeLocationResponse>> GetPayeeLocationByIdAsyncWithHttpInfo (string budgetId, string payeeLocationId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling PayeeLocationsApi->GetPayeeLocationById");
            // verify the required parameter 'payeeLocationId' is set
            if (payeeLocationId == null)
                throw new ApiException(400, "Missing required parameter 'payeeLocationId' when calling PayeeLocationsApi->GetPayeeLocationById");

            var localVarPath = "./budgets/{budget_id}/payee_locations/{payee_location_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (payeeLocationId != null) localVarPathParams.Add("payee_location_id", this.Configuration.ApiClient.ParameterToString(payeeLocationId)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayeeLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayeeLocationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeLocationResponse)));
        }

        /// <summary>
        /// List payee locations Returns all payee locations
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <returns>Task of PayeeLocationsResponse</returns>
        public async System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsAsync (string budgetId)
        {
             ApiResponse<PayeeLocationsResponse> localVarResponse = await GetPayeeLocationsAsyncWithHttpInfo(budgetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List payee locations Returns all payee locations
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <returns>Task of ApiResponse (PayeeLocationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayeeLocationsResponse>> GetPayeeLocationsAsyncWithHttpInfo (string budgetId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling PayeeLocationsApi->GetPayeeLocations");

            var localVarPath = "./budgets/{budget_id}/payee_locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayeeLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeLocationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayeeLocationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeLocationsResponse)));
        }

        /// <summary>
        /// List locations for a payee Returns all payee locations for a specified payee
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeId">id of payee</param>
        /// <returns>Task of PayeeLocationsResponse</returns>
        public async System.Threading.Tasks.Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync (string budgetId, string payeeId)
        {
             ApiResponse<PayeeLocationsResponse> localVarResponse = await GetPayeeLocationsByPayeeAsyncWithHttpInfo(budgetId, payeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List locations for a payee Returns all payee locations for a specified payee
        /// </summary>
        /// <exception cref="golf1052.YNABAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).</param>
        /// <param name="payeeId">id of payee</param>
        /// <returns>Task of ApiResponse (PayeeLocationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayeeLocationsResponse>> GetPayeeLocationsByPayeeAsyncWithHttpInfo (string budgetId, string payeeId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling PayeeLocationsApi->GetPayeeLocationsByPayee");
            // verify the required parameter 'payeeId' is set
            if (payeeId == null)
                throw new ApiException(400, "Missing required parameter 'payeeId' when calling PayeeLocationsApi->GetPayeeLocationsByPayee");

            var localVarPath = "./budgets/{budget_id}/payees/{payee_id}/payee_locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (payeeId != null) localVarPathParams.Add("payee_id", this.Configuration.ApiClient.ParameterToString(payeeId)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPayeeLocationsByPayee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeLocationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PayeeLocationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeLocationsResponse)));
        }

    }
}
