/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = golf1052.YNABAPI.Client.SwaggerDateConverter;

namespace golf1052.YNABAPI.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>
    {
        /// <summary>
        /// The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
        /// </summary>
        /// <value>The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Checking for value: checking
            /// </summary>
            [EnumMember(Value = "checking")]
            Checking = 1,
            
            /// <summary>
            /// Enum Savings for value: savings
            /// </summary>
            [EnumMember(Value = "savings")]
            Savings = 2,
            
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 3,
            
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 4,
            
            /// <summary>
            /// Enum LineOfCredit for value: lineOfCredit
            /// </summary>
            [EnumMember(Value = "lineOfCredit")]
            LineOfCredit = 5,
            
            /// <summary>
            /// Enum OtherAsset for value: otherAsset
            /// </summary>
            [EnumMember(Value = "otherAsset")]
            OtherAsset = 6,
            
            /// <summary>
            /// Enum OtherLiability for value: otherLiability
            /// </summary>
            [EnumMember(Value = "otherLiability")]
            OtherLiability = 7,
            
            /// <summary>
            /// Enum PayPal for value: payPal
            /// </summary>
            [EnumMember(Value = "payPal")]
            PayPal = 8,
            
            /// <summary>
            /// Enum MerchantAccount for value: merchantAccount
            /// </summary>
            [EnumMember(Value = "merchantAccount")]
            MerchantAccount = 9,
            
            /// <summary>
            /// Enum InvestmentAccount for value: investmentAccount
            /// </summary>
            [EnumMember(Value = "investmentAccount")]
            InvestmentAccount = 10,
            
            /// <summary>
            /// Enum Mortgage for value: mortgage
            /// </summary>
            [EnumMember(Value = "mortgage")]
            Mortgage = 11,

            /// <summary>
            /// Enum StudentLoan for value: studentLoan
            /// </summary>
            [EnumMember(Value = "studentLoan")]
            StudentLoan = 12
        }

        /// <summary>
        /// The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
        /// </summary>
        /// <value>The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Account() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future. (required).</param>
        /// <param name="onBudget">Whether this account is on budget or not (required).</param>
        /// <param name="closed">Whether this account is closed or not (required).</param>
        /// <param name="note">note.</param>
        /// <param name="balance">The current balance of the account in milliunits format (required).</param>
        /// <param name="clearedBalance">The current cleared balance of the account in milliunits format (required).</param>
        /// <param name="unclearedBalance">The current uncleared balance of the account in milliunits format (required).</param>
        /// <param name="transferPayeeId">The payee id which should be used when transferring to this account (required).</param>
        /// <param name="directImportLinked">Whether or not the account is linked to a financial institution for automatic transaction import..</param>
        /// <param name="directImportInError">If an account linked to a financial institution (direct_import_linked&#x3D;true) and the linked connection is not in a healthy state, this will be true..</param>
        /// <param name="deleted">Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests. (required).</param>
        public Account(Guid? id = default(Guid?), string name = default(string), TypeEnum type = default(TypeEnum), bool? onBudget = default(bool?), bool? closed = default(bool?), string note = default(string), long? balance = default(long?), long? clearedBalance = default(long?), long? unclearedBalance = default(long?), Guid? transferPayeeId = default(Guid?), bool? directImportLinked = default(bool?), bool? directImportInError = default(bool?), bool? deleted = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Account and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Account and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Account and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "onBudget" is required (not null)
            if (onBudget == null)
            {
                throw new InvalidDataException("onBudget is a required property for Account and cannot be null");
            }
            else
            {
                this.OnBudget = onBudget;
            }
            // to ensure "closed" is required (not null)
            if (closed == null)
            {
                throw new InvalidDataException("closed is a required property for Account and cannot be null");
            }
            else
            {
                this.Closed = closed;
            }
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for Account and cannot be null");
            }
            else
            {
                this.Balance = balance;
            }
            // to ensure "clearedBalance" is required (not null)
            if (clearedBalance == null)
            {
                throw new InvalidDataException("clearedBalance is a required property for Account and cannot be null");
            }
            else
            {
                this.ClearedBalance = clearedBalance;
            }
            // to ensure "unclearedBalance" is required (not null)
            if (unclearedBalance == null)
            {
                throw new InvalidDataException("unclearedBalance is a required property for Account and cannot be null");
            }
            else
            {
                this.UnclearedBalance = unclearedBalance;
            }
            // to ensure "transferPayeeId" is required (not null)
            if (transferPayeeId == null)
            {
                throw new InvalidDataException("transferPayeeId is a required property for Account and cannot be null");
            }
            else
            {
                this.TransferPayeeId = transferPayeeId;
            }
            // to ensure "deleted" is required (not null)
            if (deleted == null)
            {
                throw new InvalidDataException("deleted is a required property for Account and cannot be null");
            }
            else
            {
                this.Deleted = deleted;
            }
            this.Note = note;
            this.DirectImportLinked = directImportLinked;
            this.DirectImportInError = directImportInError;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Whether this account is on budget or not
        /// </summary>
        /// <value>Whether this account is on budget or not</value>
        [DataMember(Name="on_budget", EmitDefaultValue=false)]
        public bool? OnBudget { get; set; }

        /// <summary>
        /// Whether this account is closed or not
        /// </summary>
        /// <value>Whether this account is closed or not</value>
        [DataMember(Name="closed", EmitDefaultValue=false)]
        public bool? Closed { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// The current balance of the account in milliunits format
        /// </summary>
        /// <value>The current balance of the account in milliunits format</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public long? Balance { get; set; }

        /// <summary>
        /// The current cleared balance of the account in milliunits format
        /// </summary>
        /// <value>The current cleared balance of the account in milliunits format</value>
        [DataMember(Name="cleared_balance", EmitDefaultValue=false)]
        public long? ClearedBalance { get; set; }

        /// <summary>
        /// The current uncleared balance of the account in milliunits format
        /// </summary>
        /// <value>The current uncleared balance of the account in milliunits format</value>
        [DataMember(Name="uncleared_balance", EmitDefaultValue=false)]
        public long? UnclearedBalance { get; set; }

        /// <summary>
        /// The payee id which should be used when transferring to this account
        /// </summary>
        /// <value>The payee id which should be used when transferring to this account</value>
        [DataMember(Name="transfer_payee_id", EmitDefaultValue=false)]
        public Guid? TransferPayeeId { get; set; }

        /// <summary>
        /// Whether or not the account is linked to a financial institution for automatic transaction import.
        /// </summary>
        /// <value>Whether or not the account is linked to a financial institution for automatic transaction import.</value>
        [DataMember(Name="direct_import_linked", EmitDefaultValue=false)]
        public bool? DirectImportLinked { get; set; }

        /// <summary>
        /// If an account linked to a financial institution (direct_import_linked&#x3D;true) and the linked connection is not in a healthy state, this will be true.
        /// </summary>
        /// <value>If an account linked to a financial institution (direct_import_linked&#x3D;true) and the linked connection is not in a healthy state, this will be true.</value>
        [DataMember(Name="direct_import_in_error", EmitDefaultValue=false)]
        public bool? DirectImportInError { get; set; }

        /// <summary>
        /// Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
        /// </summary>
        /// <value>Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OnBudget: ").Append(OnBudget).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ClearedBalance: ").Append(ClearedBalance).Append("\n");
            sb.Append("  UnclearedBalance: ").Append(UnclearedBalance).Append("\n");
            sb.Append("  TransferPayeeId: ").Append(TransferPayeeId).Append("\n");
            sb.Append("  DirectImportLinked: ").Append(DirectImportLinked).Append("\n");
            sb.Append("  DirectImportInError: ").Append(DirectImportInError).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OnBudget == input.OnBudget ||
                    (this.OnBudget != null &&
                    this.OnBudget.Equals(input.OnBudget))
                ) && 
                (
                    this.Closed == input.Closed ||
                    (this.Closed != null &&
                    this.Closed.Equals(input.Closed))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.ClearedBalance == input.ClearedBalance ||
                    (this.ClearedBalance != null &&
                    this.ClearedBalance.Equals(input.ClearedBalance))
                ) && 
                (
                    this.UnclearedBalance == input.UnclearedBalance ||
                    (this.UnclearedBalance != null &&
                    this.UnclearedBalance.Equals(input.UnclearedBalance))
                ) && 
                (
                    this.TransferPayeeId == input.TransferPayeeId ||
                    (this.TransferPayeeId != null &&
                    this.TransferPayeeId.Equals(input.TransferPayeeId))
                ) && 
                (
                    this.DirectImportLinked == input.DirectImportLinked ||
                    (this.DirectImportLinked != null &&
                    this.DirectImportLinked.Equals(input.DirectImportLinked))
                ) && 
                (
                    this.DirectImportInError == input.DirectImportInError ||
                    (this.DirectImportInError != null &&
                    this.DirectImportInError.Equals(input.DirectImportInError))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OnBudget != null)
                    hashCode = hashCode * 59 + this.OnBudget.GetHashCode();
                if (this.Closed != null)
                    hashCode = hashCode * 59 + this.Closed.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.ClearedBalance != null)
                    hashCode = hashCode * 59 + this.ClearedBalance.GetHashCode();
                if (this.UnclearedBalance != null)
                    hashCode = hashCode * 59 + this.UnclearedBalance.GetHashCode();
                if (this.TransferPayeeId != null)
                    hashCode = hashCode * 59 + this.TransferPayeeId.GetHashCode();
                if (this.DirectImportLinked != null)
                    hashCode = hashCode * 59 + this.DirectImportLinked.GetHashCode();
                if (this.DirectImportInError != null)
                    hashCode = hashCode * 59 + this.DirectImportInError.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                return hashCode;
            }
        }
    }

}
