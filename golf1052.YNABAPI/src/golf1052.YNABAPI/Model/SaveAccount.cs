/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = golf1052.YNABAPI.Client.SwaggerDateConverter;

namespace golf1052.YNABAPI.Model
{
    /// <summary>
    /// SaveAccount
    /// </summary>
    [DataContract]
    public partial class SaveAccount :  IEquatable<SaveAccount>
    {
        /// <summary>
        /// The account type
        /// </summary>
        /// <value>The account type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Checking for value: checking
            /// </summary>
            [EnumMember(Value = "checking")]
            Checking = 1,
            
            /// <summary>
            /// Enum Savings for value: savings
            /// </summary>
            [EnumMember(Value = "savings")]
            Savings = 2,
            
            /// <summary>
            /// Enum CreditCard for value: creditCard
            /// </summary>
            [EnumMember(Value = "creditCard")]
            CreditCard = 3,
            
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 4,
            
            /// <summary>
            /// Enum LineOfCredit for value: lineOfCredit
            /// </summary>
            [EnumMember(Value = "lineOfCredit")]
            LineOfCredit = 5,
            
            /// <summary>
            /// Enum OtherAsset for value: otherAsset
            /// </summary>
            [EnumMember(Value = "otherAsset")]
            OtherAsset = 6,
            
            /// <summary>
            /// Enum OtherLiability for value: otherLiability
            /// </summary>
            [EnumMember(Value = "otherLiability")]
            OtherLiability = 7
        }

        /// <summary>
        /// The account type
        /// </summary>
        /// <value>The account type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SaveAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveAccount" /> class.
        /// </summary>
        /// <param name="name">The name of the account (required).</param>
        /// <param name="type">The account type (required).</param>
        /// <param name="balance">The current balance of the account in milliunits format (required).</param>
        public SaveAccount(string name = default(string), TypeEnum type = default(TypeEnum), long? balance = default(long?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SaveAccount and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SaveAccount and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for SaveAccount and cannot be null");
            }
            else
            {
                this.Balance = balance;
            }
        }
        
        /// <summary>
        /// The name of the account
        /// </summary>
        /// <value>The name of the account</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The current balance of the account in milliunits format
        /// </summary>
        /// <value>The current balance of the account in milliunits format</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public long? Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SaveAccount {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaveAccount);
        }

        /// <summary>
        /// Returns true if SaveAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SaveAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaveAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                return hashCode;
            }
        }
    }

}
