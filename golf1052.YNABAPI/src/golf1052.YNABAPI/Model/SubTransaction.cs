/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = golf1052.YNABAPI.Client.SwaggerDateConverter;

namespace golf1052.YNABAPI.Model
{
    /// <summary>
    /// SubTransaction
    /// </summary>
    [DataContract]
    public partial class SubTransaction :  IEquatable<SubTransaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubTransaction" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="transactionId">transactionId</param>
        /// <param name="amount">The subtransaction amount in milliunits format (required).</param>
        /// <param name="memo">memo.</param>
        /// <param name="payeeId">payeeId.</param>
        /// <param name="payeeName">payeeName.</param>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="categoryName">categoryName.</param>
        /// <param name="transferAccountId">If a transfer, the account_id which the subtransaction transfers to.</param>
        /// <param name="transferTransactionId">If a transfer, the id of transaction on the other side of the transfer.</param>
        /// <param name="deleted">Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests. (required).</param>
        public SubTransaction(string id = default(string), string transactionId = default(string), long? amount = default(long?), string memo = default(string), Guid? payeeId = default(Guid?), string payeeName = default(string), Guid? categoryId = default(Guid?), string categoryName = default(string), Guid? transferAccountId = default(Guid?), string transferTransactionId = default(string), bool? deleted = default(bool?))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for SubTransaction and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "deleted" is required (not null)
            if (deleted == null)
            {
                throw new InvalidDataException("deleted is a required property for SubTransaction and cannot be null");
            }
            else
            {
                this.Deleted = deleted;
            }
            this.Memo = memo;
            this.PayeeId = payeeId;
            this.PayeeName = payeeName;
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.TransferAccountId = transferAccountId;
            this.TransferTransactionId = transferTransactionId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The subtransaction amount in milliunits format
        /// </summary>
        /// <value>The subtransaction amount in milliunits format</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets PayeeId
        /// </summary>
        [DataMember(Name="payee_id", EmitDefaultValue=false)]
        public Guid? PayeeId { get; set; }

        /// <summary>
        /// Gets or Sets PayeeName
        /// </summary>
        [DataMember(Name="payee_name", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public Guid? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="category_name", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// If a transfer, the account_id which the subtransaction transfers to
        /// </summary>
        /// <value>If a transfer, the account_id which the subtransaction transfers to</value>
        [DataMember(Name="transfer_account_id", EmitDefaultValue=false)]
        public Guid? TransferAccountId { get; set; }

        /// <summary>
        /// If a transfer, the id of transaction on the other side of the transfer
        /// </summary>
        /// <value>If a transfer, the id of transaction on the other side of the transfer</value>
        [DataMember(Name="transfer_transaction_id", EmitDefaultValue=false)]
        public string TransferTransactionId { get; set; }

        /// <summary>
        /// Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
        /// </summary>
        /// <value>Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  TransferAccountId: ").Append(TransferAccountId).Append("\n");
            sb.Append("  TransferTransactionId: ").Append(TransferTransactionId).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubTransaction);
        }

        /// <summary>
        /// Returns true if SubTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of SubTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.TransferAccountId == input.TransferAccountId ||
                    (this.TransferAccountId != null &&
                    this.TransferAccountId.Equals(input.TransferAccountId))
                ) && 
                (
                    this.TransferTransactionId == input.TransferTransactionId ||
                    (this.TransferTransactionId != null &&
                    this.TransferTransactionId.Equals(input.TransferTransactionId))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.TransferAccountId != null)
                    hashCode = hashCode * 59 + this.TransferAccountId.GetHashCode();
                if (this.TransferTransactionId != null)
                    hashCode = hashCode * 59 + this.TransferTransactionId.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                return hashCode;
            }
        }
    }

}
