/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = golf1052.YNABAPI.Client.SwaggerDateConverter;

namespace golf1052.YNABAPI.Model
{
    /// <summary>
    /// The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
    /// </summary>
    [DataContract]
    public partial class CurrencyFormat :  IEquatable<CurrencyFormat>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyFormat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyFormat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyFormat" /> class.
        /// </summary>
        /// <param name="isoCode">isoCode (required).</param>
        /// <param name="exampleFormat">exampleFormat (required).</param>
        /// <param name="decimalDigits">decimalDigits (required).</param>
        /// <param name="decimalSeparator">decimalSeparator (required).</param>
        /// <param name="symbolFirst">symbolFirst (required).</param>
        /// <param name="groupSeparator">groupSeparator (required).</param>
        /// <param name="currencySymbol">currencySymbol (required).</param>
        /// <param name="displaySymbol">displaySymbol (required).</param>
        public CurrencyFormat(string isoCode = default(string), string exampleFormat = default(string), int? decimalDigits = default(int?), string decimalSeparator = default(string), bool? symbolFirst = default(bool?), string groupSeparator = default(string), string currencySymbol = default(string), bool? displaySymbol = default(bool?))
        {
            // to ensure "isoCode" is required (not null)
            if (isoCode == null)
            {
                throw new InvalidDataException("isoCode is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.IsoCode = isoCode;
            }
            // to ensure "exampleFormat" is required (not null)
            if (exampleFormat == null)
            {
                throw new InvalidDataException("exampleFormat is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.ExampleFormat = exampleFormat;
            }
            // to ensure "decimalDigits" is required (not null)
            if (decimalDigits == null)
            {
                throw new InvalidDataException("decimalDigits is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.DecimalDigits = decimalDigits;
            }
            // to ensure "decimalSeparator" is required (not null)
            if (decimalSeparator == null)
            {
                throw new InvalidDataException("decimalSeparator is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.DecimalSeparator = decimalSeparator;
            }
            // to ensure "symbolFirst" is required (not null)
            if (symbolFirst == null)
            {
                throw new InvalidDataException("symbolFirst is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.SymbolFirst = symbolFirst;
            }
            // to ensure "groupSeparator" is required (not null)
            if (groupSeparator == null)
            {
                throw new InvalidDataException("groupSeparator is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.GroupSeparator = groupSeparator;
            }
            // to ensure "currencySymbol" is required (not null)
            if (currencySymbol == null)
            {
                throw new InvalidDataException("currencySymbol is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.CurrencySymbol = currencySymbol;
            }
            // to ensure "displaySymbol" is required (not null)
            if (displaySymbol == null)
            {
                throw new InvalidDataException("displaySymbol is a required property for CurrencyFormat and cannot be null");
            }
            else
            {
                this.DisplaySymbol = displaySymbol;
            }
        }
        
        /// <summary>
        /// Gets or Sets IsoCode
        /// </summary>
        [DataMember(Name="iso_code", EmitDefaultValue=false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// Gets or Sets ExampleFormat
        /// </summary>
        [DataMember(Name="example_format", EmitDefaultValue=false)]
        public string ExampleFormat { get; set; }

        /// <summary>
        /// Gets or Sets DecimalDigits
        /// </summary>
        [DataMember(Name="decimal_digits", EmitDefaultValue=false)]
        public int? DecimalDigits { get; set; }

        /// <summary>
        /// Gets or Sets DecimalSeparator
        /// </summary>
        [DataMember(Name="decimal_separator", EmitDefaultValue=false)]
        public string DecimalSeparator { get; set; }

        /// <summary>
        /// Gets or Sets SymbolFirst
        /// </summary>
        [DataMember(Name="symbol_first", EmitDefaultValue=false)]
        public bool? SymbolFirst { get; set; }

        /// <summary>
        /// Gets or Sets GroupSeparator
        /// </summary>
        [DataMember(Name="group_separator", EmitDefaultValue=false)]
        public string GroupSeparator { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="currency_symbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets DisplaySymbol
        /// </summary>
        [DataMember(Name="display_symbol", EmitDefaultValue=false)]
        public bool? DisplaySymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyFormat {\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  ExampleFormat: ").Append(ExampleFormat).Append("\n");
            sb.Append("  DecimalDigits: ").Append(DecimalDigits).Append("\n");
            sb.Append("  DecimalSeparator: ").Append(DecimalSeparator).Append("\n");
            sb.Append("  SymbolFirst: ").Append(SymbolFirst).Append("\n");
            sb.Append("  GroupSeparator: ").Append(GroupSeparator).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  DisplaySymbol: ").Append(DisplaySymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyFormat);
        }

        /// <summary>
        /// Returns true if CurrencyFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyFormat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsoCode == input.IsoCode ||
                    (this.IsoCode != null &&
                    this.IsoCode.Equals(input.IsoCode))
                ) && 
                (
                    this.ExampleFormat == input.ExampleFormat ||
                    (this.ExampleFormat != null &&
                    this.ExampleFormat.Equals(input.ExampleFormat))
                ) && 
                (
                    this.DecimalDigits == input.DecimalDigits ||
                    (this.DecimalDigits != null &&
                    this.DecimalDigits.Equals(input.DecimalDigits))
                ) && 
                (
                    this.DecimalSeparator == input.DecimalSeparator ||
                    (this.DecimalSeparator != null &&
                    this.DecimalSeparator.Equals(input.DecimalSeparator))
                ) && 
                (
                    this.SymbolFirst == input.SymbolFirst ||
                    (this.SymbolFirst != null &&
                    this.SymbolFirst.Equals(input.SymbolFirst))
                ) && 
                (
                    this.GroupSeparator == input.GroupSeparator ||
                    (this.GroupSeparator != null &&
                    this.GroupSeparator.Equals(input.GroupSeparator))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.DisplaySymbol == input.DisplaySymbol ||
                    (this.DisplaySymbol != null &&
                    this.DisplaySymbol.Equals(input.DisplaySymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsoCode != null)
                    hashCode = hashCode * 59 + this.IsoCode.GetHashCode();
                if (this.ExampleFormat != null)
                    hashCode = hashCode * 59 + this.ExampleFormat.GetHashCode();
                if (this.DecimalDigits != null)
                    hashCode = hashCode * 59 + this.DecimalDigits.GetHashCode();
                if (this.DecimalSeparator != null)
                    hashCode = hashCode * 59 + this.DecimalSeparator.GetHashCode();
                if (this.SymbolFirst != null)
                    hashCode = hashCode * 59 + this.SymbolFirst.GetHashCode();
                if (this.GroupSeparator != null)
                    hashCode = hashCode * 59 + this.GroupSeparator.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.DisplaySymbol != null)
                    hashCode = hashCode * 59 + this.DisplaySymbol.GetHashCode();
                return hashCode;
            }
        }
    }

}
